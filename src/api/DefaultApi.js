/**
 * TrainingApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountModel', 'model/CreateImageSummaryModel', 'model/DomainModel', 'model/ImageIdCreateBatch', 'model/ImageModel', 'model/ImageTagListModel', 'model/ImageTagModel', 'model/ImageUrlCreateBatch', 'model/IterationModel', 'model/IterationPerformanceModel', 'model/PredictionQueryModel', 'model/PredictionQueryTokenModel', 'model/ProjectModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountModel'), require('../model/CreateImageSummaryModel'), require('../model/DomainModel'), require('../model/ImageIdCreateBatch'), require('../model/ImageModel'), require('../model/ImageTagListModel'), require('../model/ImageTagModel'), require('../model/ImageUrlCreateBatch'), require('../model/IterationModel'), require('../model/IterationPerformanceModel'), require('../model/PredictionQueryModel'), require('../model/PredictionQueryTokenModel'), require('../model/ProjectModel'));
  } else {
    // Browser globals (root is window)
    if (!root.TrainingApi) {
      root.TrainingApi = {};
    }
    root.TrainingApi.DefaultApi = factory(root.TrainingApi.ApiClient, root.TrainingApi.AccountModel, root.TrainingApi.CreateImageSummaryModel, root.TrainingApi.DomainModel, root.TrainingApi.ImageIdCreateBatch, root.TrainingApi.ImageModel, root.TrainingApi.ImageTagListModel, root.TrainingApi.ImageTagModel, root.TrainingApi.ImageUrlCreateBatch, root.TrainingApi.IterationModel, root.TrainingApi.IterationPerformanceModel, root.TrainingApi.PredictionQueryModel, root.TrainingApi.PredictionQueryTokenModel, root.TrainingApi.ProjectModel);
  }
}(this, function(ApiClient, AccountModel, CreateImageSummaryModel, DomainModel, ImageIdCreateBatch, ImageModel, ImageTagListModel, ImageTagModel, ImageUrlCreateBatch, IterationModel, IterationPerformanceModel, PredictionQueryModel, PredictionQueryTokenModel, ProjectModel) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createImagesFromData operation.
     * @callback module:api/DefaultApi~createImagesFromDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateImageSummaryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the provided images to the current project iteration
     * @param {String} projectId The project id.
     * @param {File} imageData 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.tagIds The tags ids to associate with the image batch.
     * @param {module:api/DefaultApi~createImagesFromDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateImageSummaryModel}
     */
    this.createImagesFromData = function(projectId, imageData, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling createImagesFromData");
      }

      // verify the required parameter 'imageData' is set
      if (imageData == undefined || imageData == null) {
        throw new Error("Missing the required parameter 'imageData' when calling createImagesFromData");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'tagIds': this.apiClient.buildCollectionParam(opts['tagIds'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data', 'application/octet-stream'];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = CreateImageSummaryModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/images/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImagesFromPredictions operation.
     * @callback module:api/DefaultApi~createImagesFromPredictionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateImageSummaryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the specified predicted images to the current project iteration
     * @param {String} projectId The project id.
     * @param {module:model/ImageIdCreateBatch} importBatch Image and tag ids
     * @param {module:api/DefaultApi~createImagesFromPredictionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateImageSummaryModel}
     */
    this.createImagesFromPredictions = function(projectId, importBatch, callback) {
      var postBody = importBatch;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling createImagesFromPredictions");
      }

      // verify the required parameter 'importBatch' is set
      if (importBatch == undefined || importBatch == null) {
        throw new Error("Missing the required parameter 'importBatch' when calling createImagesFromPredictions");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', '', '', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = CreateImageSummaryModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/images/predictions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImagesFromUrls operation.
     * @callback module:api/DefaultApi~createImagesFromUrlsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateImageSummaryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the provided images to the current project iteration
     * @param {String} projectId The project id.
     * @param {module:model/ImageUrlCreateBatch} createBatch Image urls and tag ids
     * @param {module:api/DefaultApi~createImagesFromUrlsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateImageSummaryModel}
     */
    this.createImagesFromUrls = function(projectId, createBatch, callback) {
      var postBody = createBatch;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling createImagesFromUrls");
      }

      // verify the required parameter 'createBatch' is set
      if (createBatch == undefined || createBatch == null) {
        throw new Error("Missing the required parameter 'createBatch' when calling createImagesFromUrls");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', '', '', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = CreateImageSummaryModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/images/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/DefaultApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project
     * @param {String} name Name of the project to create
     * @param {Object} opts Optional parameters
     * @param {String} opts.description The description of the of the project
     * @param {String} opts.domainId The id of the domain to enable for this project
     * @param {module:api/DefaultApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectModel}
     */
    this.createProject = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling createProject");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'description': opts['description'],
        'domainId': opts['domainId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = ProjectModel;

      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTag operation.
     * @callback module:api/DefaultApi~createTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageTagModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a tag for the project
     * @param {String} projectId 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} opts.description 
     * @param {module:api/DefaultApi~createTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageTagModel}
     */
    this.createTag = function(projectId, name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling createTag");
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling createTag");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'name': name,
        'description': opts['description']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = ImageTagModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageLabel operation.
     * @callback module:api/DefaultApi~deleteImageLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a image label
     * @param {String} projectId Guid of projectId
     * @param {String} imageId Guid of imageId
     * @param {String} labelId Guid of labelId
     * @param {module:api/DefaultApi~deleteImageLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageModel}
     */
    this.deleteImageLabel = function(projectId, imageId, labelId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteImageLabel");
      }

      // verify the required parameter 'imageId' is set
      if (imageId == undefined || imageId == null) {
        throw new Error("Missing the required parameter 'imageId' when calling deleteImageLabel");
      }

      // verify the required parameter 'labelId' is set
      if (labelId == undefined || labelId == null) {
        throw new Error("Missing the required parameter 'labelId' when calling deleteImageLabel");
      }


      var pathParams = {
        'projectId': projectId,
        'imageId': imageId,
        'labelId': labelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = ImageModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/images/{imageId}/label/{labelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImages operation.
     * @callback module:api/DefaultApi~deleteImagesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete images from the current project iteration
     * @param {String} projectId Guid of projectId
     * @param {Array.<String>} imageIds Ids of the images to be deleted
     * @param {module:api/DefaultApi~deleteImagesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteImages = function(projectId, imageIds, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteImages");
      }

      // verify the required parameter 'imageIds' is set
      if (imageIds == undefined || imageIds == null) {
        throw new Error("Missing the required parameter 'imageIds' when calling deleteImages");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'imageIds': this.apiClient.buildCollectionParam(imageIds, 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectId}/images', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIteration operation.
     * @callback module:api/DefaultApi~deleteIterationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific iteration of a project
     * @param {String} projectId Guid of the projectId
     * @param {String} iterationId Guid of the iterationId
     * @param {module:api/DefaultApi~deleteIterationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteIteration = function(projectId, iterationId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteIteration");
      }

      // verify the required parameter 'iterationId' is set
      if (iterationId == undefined || iterationId == null) {
        throw new Error("Missing the required parameter 'iterationId' when calling deleteIteration");
      }


      var pathParams = {
        'projectId': projectId,
        'iterationId': iterationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectId}/iterations/{iterationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePrediction operation.
     * @callback module:api/DefaultApi~deletePredictionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} projectId 
     * @param {Array.<String>} ids 
     * @param {module:api/DefaultApi~deletePredictionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePrediction = function(projectId, ids, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deletePrediction");
      }

      // verify the required parameter 'ids' is set
      if (ids == undefined || ids == null) {
        throw new Error("Missing the required parameter 'ids' when calling deletePrediction");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectId}/predictions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/DefaultApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific project
     * @param {String} projectId Guid of the projectId
     * @param {module:api/DefaultApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProject = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProject");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTag operation.
     * @callback module:api/DefaultApi~deleteTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for the project
     * @param {String} projectId 
     * @param {String} tagId 
     * @param {module:api/DefaultApi~deleteTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTag = function(projectId, tagId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteTag");
      }

      // verify the required parameter 'tagId' is set
      if (tagId == undefined || tagId == null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteTag");
      }


      var pathParams = {
        'projectId': projectId,
        'tagId': tagId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectId}/tags/{tagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountInfo operation.
     * @callback module:api/DefaultApi~getAccountInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getAccountInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountModel}
     */
    this.getAccountInfo = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = AccountModel;

      return this.apiClient.callApi(
        '/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTaggedImages operation.
     * @callback module:api/DefaultApi~getAllTaggedImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all tagged images for a given project iteration
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.  If the total number of images is less than ({skip} + {take})  the number of images returned will be less than {take}.
     * @param {String} projectId The project id
     * @param {Object} opts Optional parameters
     * @param {String} opts.iterationId The iteration id. This will default to the current iteration
     * @param {module:model/String} opts.orderBy The ordering. Defaults to newest
     * @param {Number} opts.take Maximum number of images to return. Defaults to 50 (default to 50)
     * @param {Number} opts.skip How many images should be skipped before begining the image batch. Defaults to 0 (default to 0)
     * @param {module:api/DefaultApi~getAllTaggedImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageModel>}
     */
    this.getAllTaggedImages = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getAllTaggedImages");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'iterationId': opts['iterationId'],
        'orderBy': opts['orderBy'],
        'take': opts['take'],
        'skip': opts['skip']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = [ImageModel];

      return this.apiClient.callApi(
        '/projects/{projectId}/images/tagged/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUntaggedImages operation.
     * @callback module:api/DefaultApi~getAllUntaggedImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all untagged images for a given project iteration
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.  If the total number of images is less than ({skip} + {take})  the number of images returned will be less than {take}.
     * @param {String} projectId The project id
     * @param {Object} opts Optional parameters
     * @param {String} opts.iterationId The iteration id. This will default to the current iteration
     * @param {module:model/String} opts.orderBy The ordering. Defaults to newest
     * @param {Number} opts.take Maximum number of images to return. Defaults to 50 (default to 50)
     * @param {Number} opts.skip How many images should be skipped before begining the image batch. Defaults to 0 (default to 0)
     * @param {module:api/DefaultApi~getAllUntaggedImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageModel>}
     */
    this.getAllUntaggedImages = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getAllUntaggedImages");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'iterationId': opts['iterationId'],
        'orderBy': opts['orderBy'],
        'take': opts['take'],
        'skip': opts['skip']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = [ImageModel];

      return this.apiClient.callApi(
        '/projects/{projectId}/images/untagged', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomain operation.
     * @callback module:api/DefaultApi~getDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specific domain
     * @param {String} domainId The id of the domain to get information about
     * @param {module:api/DefaultApi~getDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainModel}
     */
    this.getDomain = function(domainId, callback) {
      var postBody = null;

      // verify the required parameter 'domainId' is set
      if (domainId == undefined || domainId == null) {
        throw new Error("Missing the required parameter 'domainId' when calling getDomain");
      }


      var pathParams = {
        'domainId': domainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = DomainModel;

      return this.apiClient.callApi(
        '/domains/{domainId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomains operation.
     * @callback module:api/DefaultApi~getDomainsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DomainModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the avaiable domains
     * @param {module:api/DefaultApi~getDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DomainModel>}
     */
    this.getDomains = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = [DomainModel];

      return this.apiClient.callApi(
        '/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImagesByTags operation.
     * @callback module:api/DefaultApi~getImagesByTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets tagged images for a given project iteration
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.  If the total number of images is less than ({skip} + {take})  the number of images returned will be less than {take}.
     * @param {String} projectId The project id
     * @param {Object} opts Optional parameters
     * @param {String} opts.iterationId The iteration id. This will default to the current iteration
     * @param {Array.<String>} opts.tagIds An required list of tags ids to filter the images. For example, if the provided tag ids are for the \&quot;Dog\&quot; and              \&quot;Cat\&quot; tags, then only images tagged with Dog OR Cat will be returned. Otherwise, all tagged images will be returned.
     * @param {module:model/String} opts.orderBy The ordering. Defaults to newest
     * @param {Number} opts.take Maximum number of images to return. Defaults to 50 (default to 50)
     * @param {Number} opts.skip How many images should be skipped before begining the image batch. Defaults to 0 (default to 0)
     * @param {module:api/DefaultApi~getImagesByTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageModel>}
     */
    this.getImagesByTags = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getImagesByTags");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'iterationId': opts['iterationId'],
        'tagIds': this.apiClient.buildCollectionParam(opts['tagIds'], 'multi'),
        'orderBy': opts['orderBy'],
        'take': opts['take'],
        'skip': opts['skip']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = [ImageModel];

      return this.apiClient.callApi(
        '/projects/{projectId}/images/tagged', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIteration operation.
     * @callback module:api/DefaultApi~getIterationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IterationModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific iteration
     * @param {String} projectId The id of the project the iteration belongs to
     * @param {String} iterationId The id of the iteration to get
     * @param {module:api/DefaultApi~getIterationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IterationModel}
     */
    this.getIteration = function(projectId, iterationId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getIteration");
      }

      // verify the required parameter 'iterationId' is set
      if (iterationId == undefined || iterationId == null) {
        throw new Error("Missing the required parameter 'iterationId' when calling getIteration");
      }


      var pathParams = {
        'projectId': projectId,
        'iterationId': iterationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = IterationModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/iterations/{iterationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIterationPerformance operation.
     * @callback module:api/DefaultApi~getIterationPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IterationPerformanceModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed performance information about an iteration
     * @param {String} projectId The id of the project the iteration belongs to
     * @param {String} iterationId The id of the iteration to get
     * @param {Number} threshold The threshold threshold used to determine positive predictions
     * @param {module:api/DefaultApi~getIterationPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IterationPerformanceModel}
     */
    this.getIterationPerformance = function(projectId, iterationId, threshold, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getIterationPerformance");
      }

      // verify the required parameter 'iterationId' is set
      if (iterationId == undefined || iterationId == null) {
        throw new Error("Missing the required parameter 'iterationId' when calling getIterationPerformance");
      }

      // verify the required parameter 'threshold' is set
      if (threshold == undefined || threshold == null) {
        throw new Error("Missing the required parameter 'threshold' when calling getIterationPerformance");
      }


      var pathParams = {
        'projectId': projectId,
        'iterationId': iterationId
      };
      var queryParams = {
        'threshold': threshold
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = IterationPerformanceModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/iterations/{iterationId}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIterations operation.
     * @callback module:api/DefaultApi~getIterationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IterationModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get iterations for the project
     * @param {String} projectId The project id.
     * @param {module:api/DefaultApi~getIterationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IterationModel>}
     */
    this.getIterations = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getIterations");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = [IterationModel];

      return this.apiClient.callApi(
        '/projects/{projectId}/iterations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNextPredictionResults operation.
     * @callback module:api/DefaultApi~getNextPredictionResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictionQueryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} projectId 
     * @param {module:model/PredictionQueryTokenModel} queryToken 
     * @param {module:api/DefaultApi~getNextPredictionResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictionQueryModel}
     */
    this.getNextPredictionResults = function(projectId, queryToken, callback) {
      var postBody = queryToken;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getNextPredictionResults");
      }

      // verify the required parameter 'queryToken' is set
      if (queryToken == undefined || queryToken == null) {
        throw new Error("Missing the required parameter 'queryToken' when calling getNextPredictionResults");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', '', '', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = PredictionQueryModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/predictions/next', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPredictionResults operation.
     * @callback module:api/DefaultApi~getPredictionResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictionQueryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} projectId 
     * @param {Number} maxCount 
     * @param {module:model/String} orderBy 
     * @param {Object} opts Optional parameters
     * @param {String} opts.iterationId 
     * @param {Array.<String>} opts.tagIds 
     * @param {Number} opts.threshold 
     * @param {Date} opts.startTime 
     * @param {Date} opts.endTime 
     * @param {String} opts.source 
     * @param {module:api/DefaultApi~getPredictionResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictionQueryModel}
     */
    this.getPredictionResults = function(projectId, maxCount, orderBy, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getPredictionResults");
      }

      // verify the required parameter 'maxCount' is set
      if (maxCount == undefined || maxCount == null) {
        throw new Error("Missing the required parameter 'maxCount' when calling getPredictionResults");
      }

      // verify the required parameter 'orderBy' is set
      if (orderBy == undefined || orderBy == null) {
        throw new Error("Missing the required parameter 'orderBy' when calling getPredictionResults");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'maxCount': maxCount,
        'orderBy': orderBy,
        'iterationId': opts['iterationId'],
        'tagIds': this.apiClient.buildCollectionParam(opts['tagIds'], 'multi'),
        'threshold': opts['threshold'],
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'source': opts['source']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = PredictionQueryModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/predictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/DefaultApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project
     * @param {String} projectId The id of the project to get
     * @param {module:api/DefaultApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectModel}
     */
    this.getProject = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProject");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = ProjectModel;

      return this.apiClient.callApi(
        '/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/DefaultApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the user&#39;s projects
     * @param {module:api/DefaultApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectModel>}
     */
    this.getProjects = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = [ProjectModel];

      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTag operation.
     * @callback module:api/DefaultApi~getTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageTagModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specific tag
     * @param {String} projectId The project this tag belongs to
     * @param {String} tagId The id of the tag
     * @param {Object} opts Optional parameters
     * @param {String} opts.iterationId The iteration to retrieve this tag from. Optional, defaults to the current iteration
     * @param {module:api/DefaultApi~getTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageTagModel}
     */
    this.getTag = function(projectId, tagId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getTag");
      }

      // verify the required parameter 'tagId' is set
      if (tagId == undefined || tagId == null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTag");
      }


      var pathParams = {
        'projectId': projectId,
        'tagId': tagId
      };
      var queryParams = {
        'iterationId': opts['iterationId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = ImageTagModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/tags/{tagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTags operation.
     * @callback module:api/DefaultApi~getTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageTagListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get&#39;s the project tags for a given project and iteration
     * @param {String} projectId The project id
     * @param {Object} opts Optional parameters
     * @param {String} opts.iterationId The iteration id. This will default to the current iteration
     * @param {module:api/DefaultApi~getTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageTagListModel}
     */
    this.getTags = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling getTags");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'iterationId': opts['iterationId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = ImageTagListModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postImageLabel operation.
     * @callback module:api/DefaultApi~postImageLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a label to a specific image
     * @param {String} projectId Guid of projectId
     * @param {String} imageId Guid of imageId
     * @param {String} tagId Guid of the tag to create this label for
     * @param {module:api/DefaultApi~postImageLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageModel}
     */
    this.postImageLabel = function(projectId, imageId, tagId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling postImageLabel");
      }

      // verify the required parameter 'imageId' is set
      if (imageId == undefined || imageId == null) {
        throw new Error("Missing the required parameter 'imageId' when calling postImageLabel");
      }

      // verify the required parameter 'tagId' is set
      if (tagId == undefined || tagId == null) {
        throw new Error("Missing the required parameter 'tagId' when calling postImageLabel");
      }


      var pathParams = {
        'projectId': projectId,
        'imageId': imageId
      };
      var queryParams = {
        'tagId': tagId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = ImageModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/images/{imageId}/label', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trainProject operation.
     * @callback module:api/DefaultApi~trainProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IterationModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queues training of the current iteration for the project
     * @param {String} projectId The project id.
     * @param {module:api/DefaultApi~trainProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IterationModel}
     */
    this.trainProject = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling trainProject");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = IterationModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/train', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIteration operation.
     * @callback module:api/DefaultApi~updateIterationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IterationModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific iteration
     * @param {String} projectId Guid of the projectId
     * @param {String} iterationId Guid of the iteration
     * @param {module:model/IterationModel} updatedIteration The updated iteration model
     * @param {module:api/DefaultApi~updateIterationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IterationModel}
     */
    this.updateIteration = function(projectId, iterationId, updatedIteration, callback) {
      var postBody = updatedIteration;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateIteration");
      }

      // verify the required parameter 'iterationId' is set
      if (iterationId == undefined || iterationId == null) {
        throw new Error("Missing the required parameter 'iterationId' when calling updateIteration");
      }

      // verify the required parameter 'updatedIteration' is set
      if (updatedIteration == undefined || updatedIteration == null) {
        throw new Error("Missing the required parameter 'updatedIteration' when calling updateIteration");
      }


      var pathParams = {
        'projectId': projectId,
        'iterationId': iterationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', '', '', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = IterationModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/iterations/{iterationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/DefaultApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific project
     * @param {String} projectId The id of the project to update
     * @param {module:model/ProjectModel} updatedProject The updated project model
     * @param {module:api/DefaultApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectModel}
     */
    this.updateProject = function(projectId, updatedProject, callback) {
      var postBody = updatedProject;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateProject");
      }

      // verify the required parameter 'updatedProject' is set
      if (updatedProject == undefined || updatedProject == null) {
        throw new Error("Missing the required parameter 'updatedProject' when calling updateProject");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', '', '', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = ProjectModel;

      return this.apiClient.callApi(
        '/projects/{projectId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTag operation.
     * @callback module:api/DefaultApi~updateTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageTagModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a tag for the project
     * @param {String} projectId The project id this tag belongs to
     * @param {String} tagId The id of the tag to update
     * @param {module:model/ImageTagModel} updatedTag The updated tag model
     * @param {module:api/DefaultApi~updateTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageTagModel}
     */
    this.updateTag = function(projectId, tagId, updatedTag, callback) {
      var postBody = updatedTag;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateTag");
      }

      // verify the required parameter 'tagId' is set
      if (tagId == undefined || tagId == null) {
        throw new Error("Missing the required parameter 'tagId' when calling updateTag");
      }

      // verify the required parameter 'updatedTag' is set
      if (updatedTag == undefined || updatedTag == null) {
        throw new Error("Missing the required parameter 'updatedTag' when calling updateTag");
      }


      var pathParams = {
        'projectId': projectId,
        'tagId': tagId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', '', '', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = ImageTagModel;

      return this.apiClient.callApi(
        '/projects/{projectId}/tags/{tagId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
